"""BMI 6018 Fall 2022 

Instructions: For this assignment, please return all answers as variables in your
.py file. You will quickly note that you will need to find answers outside the
class lectures. This is not an accident! You will need to become professionally
comfortable with looking things up via the python docs and google. 

Ensure that all variables are labelled according to the example. IE the answer
to problem 1 part c should be labelled one_c. While all questions are answerable
with a single line of code, you are free to use helper variables so long as they
are helpfully/informatively named. 

I should be able to open your .py file and run it without errors. I will **not** be 
debugging your code for you. If your file does not run, it will **not** be graded. 
If you are unsure if your file will run, open up a chpc terminal and test it there.

For this assignment, please only use base python files types. That is: there 
should be no import calls in your file save my use of sys at the end.

Example Problem

0.a Create a list of strings
0.b Using a str method, capitalize one of the elements in the list using a slice
0.c Coerce one character of the list to display as a hex

zero_a = ['first','second','third','fourth','fifth']
zero_b = zero_a[1].upper()
zero_c = hex(ord(zero_a[1][1]))

#Problem 1: Lists, Sets and Coersion

1.a Create a list of integers no fewer than 10 items from 0 to 9.
 .b Add 3 to the 5th indexed element
 .c Coerce all elements in the list to floats using list comprehension
 .d Coerce the list to a set
 .e Using a method, append int 10 to the set
 .f Using a method, pop an item from the set
 .g Using a length counting function, count the number of items in the set
 .h Check if the number of items in the set is the same as the 
    number of items in the list
 .i Coerce the set to a list and use the "+" operator combine the list to the list from 1.a
 .j Coerce 1.i to a set
 .k Count the number of elements in the 1.j



Problem 2: Dictionary woes

2.a Combine the three sample dictionaries (given below) into a nested dictionary (nested in programming means joined), named 
    two_a, ensure the key names are the same as the dictionary names.
 .b Using keys, retrieve the Dango's name from 2.a
 .c Using keys, update the value of Mochi's year to 2018. This should not be a variable
    and should simply update 2.a.
 .d Manually create a dictionary that has a single level and contains each patient
    as the key and the year as the value. Set Mochi's year to 2019.'
 .e Coerce the keys of 2.d into a list
 .f Coerce the values of 2.d into a list
 .g Use the zip function to combine 2.e and 2.f into a dictionary again


two_patient_dictionary_kinoko = {
  "name" : "Kinoko",
  "year" : 2021
}
two_patient_dictionary_dango = {
  "name" : "Dango",
  "year" : 2019
}
two_patient_dictionary_mochi  = {
  "name" : "Mochi",
  "year" : 2020
}



Problem 3: Set combinations

Given the predefined sets below and using set methods
3.a Is set E a subset of set A
 .b Is set E a strict subset of set A
 .c Create a set that is the intersection of set A and set B
 .d Create a set that is the union of sets C, D and E
 .e add 9 to the set
 .f Using == compare this set to the list in one_a
 .g Explain why they are not the same. What would you need to change if you
    wanted this to be True?
 

three_setA = {1,2,3,4,5}
three_setB = {2,3,4,5,6}
three_setC = {3,5,7,9}
three_setD = {2,4,6,8}
three_setE = {1,2,3,4}



Problem 4: Changing variable types

For each step you will modify a variable, then append the type of the variable
to a list. Do not recreate the list variable, it should be a running list of 
types.

4.a Create a variable of type int with the value of 8
 .b Create an empty list 
 .c Using type(), add the type of 4.a to this list
 .d Add 0.39 to 4.c
 .e append the type of 0.39 to the list
 .f exponentiate to the -10, ie: 4.d^-10,(hint: there might be an artihmetic operator to do so) round it to no 
    decimal places, and append to list.
 .g append the type to the list
 
 
Problem 5: More variable type changes

Continue from where you left off in Problem 4.

5.a Manually create a dictionary where the values are items in the list from where we left in 
    problem 4, and the keys should be their index in the list. Print the dictionary.
 .b Add 300 and coerce it into a string
 .c append the type to the list
 .d slice the string up to the 2nd element
 .e append the type to the list
 .f use list comprehension to convert this into a new list of integers
 .g append the type to the list
 .h append the type of three_setA to the list
"""

#Start your assignment here
print("Assignment 3")

#Number 1

one_a = [1,2,3,4,5,6,7,8,9,0]

one_b = one_a.copy()
one_b.insert(5,3)
# this is based on what we were told on the discussion board

#using the items in list in one_a, not including the insertion from one_b from here down
one_c = []
for item in one_a:
    one_c.append(float(item))
    
one_d = set(one_a)

# For one E, you can not use .append() on a set, but you can use .add(), based on what was said in the discussion board
one_e = one_d.copy()
one_e.add(10)

one_f = one_e.copy()
one_f.pop()

# Using the remaining set from part f
one_g = len(one_f)

#one h
if len(one_a) == len(one_f):
    one_h= "one_a and one_f are the same length."


if len(one_a) != len(one_f):
    one_h= "one_a and one_f are not the same length."

one_i_list = list(one_f)
one_i = one_i_list + one_a

one_j = set(one_i)
#Sets do not have duplicates, so some items were omitted

one_k = len(one_j)

print("Number 1")
print(one_a)
print(one_b)
print(one_c)
print(one_d)
print(one_e)
print(one_f)
print(one_g)
print(one_h)
print(one_i)
print(one_j)
print(one_k
     )


#Number 2

two_patient_dictionary_kinoko = {
  "name" : "Kinoko",
  "year" : 2021
}
two_patient_dictionary_dango = {
  "name" : "Dango",
  "year" : 2019
}
two_patient_dictionary_mochi  = {
  "name" : "Mochi",
  "year" : 2020
}

two_a = {
"two_patient_dictionary_kinoko" : two_patient_dictionary_kinoko,
"two_patient_dictionary_dango" : two_patient_dictionary_dango,
"two_patient_dictionary_mochi" : two_patient_dictionary_mochi
}

two_b = (two_a["two_patient_dictionary_dango"]["name"])

#two_c
two_a["two_patient_dictionary_mochi"]["year"] = 2018
#If two_a is printed, it will now show the year for Mochi as 2018

two_d = {"Kinoko":2021, "Dango":2019, "Mochi":2019}

two_e = list(two_d.keys())

two_f = list(two_d.values())

two_g = dict(zip(two_e, two_f))

print("Number 2")
print(two_a)
print(two_b)
print("two_c just changed the year for Mochi to 2018 in two_a, so it will print accordingly")
print(two_d)
print(two_e)
print(two_f)
print(two_g
     )


#Number 3

three_setA = {1,2,3,4,5}
three_setB = {2,3,4,5,6}
three_setC = {3,5,7,9}
three_setD = {2,4,6,8}
three_setE = {1,2,3,4}


three_a = (three_setE.issubset(three_setA))

three_b = "True. A strict subset is when a subset has all of the numbers of the set, but the set includes more numbers than that. We saw in three_a that E is a subset of A, and we can confirm that it is a strict subset as well because there are more numbers in A, there's the additional 5. So E IS a strict subset of A."

three_c = (three_setA.intersection(three_setB))

three_d = (three_setC.union(three_setD,three_setE))

three_e = three_d.copy()
three_e.add(9)
#There is already a 9 in the set, so there will be nothing added for three_3, but this is the code to add

three_f = three_e == one_a

three_g = "So first off, there is a 0 in one_a that is not there is three_e. But even if you changed the 0 to a 9 in one_a, it would not work though. There are 10 items in one_a and 9 in three_e. one_a is a list while three_e is a set, so there are some differences. The biggest being,sets do not have duplicates, so even though we added 9 in the previous step, it was not added. To fix this, we would have to convert the set to a list, to ensure it can have duplicates, and ensure that the list in one_a has a 9 in place of the 0."

print("Number 3")
print(three_a)
print(three_b)
print(three_c)
print(three_d)
print(three_e)
print(three_f)
print(three_g
     )


# Number 4
four_a= 8

four_b= []

four_c = four_b.copy()
four_c.insert(0,(type(four_a)))

four_d_var = .39
four_d= four_c.copy()
four_d.append(four_d_var)

four_e = four_d.copy()
four_e.append(type(four_d_var))

four_f = four_e.copy()
four_f_var = int(four_d_var**-10)
four_f.append(four_f_var)

four_g = four_f.copy()
four_g.append(type(four_f_var))

print("Number 4")
print(four_a)
print(four_b)
print(four_c)
print(four_d)
print(four_e)
print(four_f)
print(four_g)


#Number 5
print("Number 5")

five_a = {
    0:four_g[0],
    1:four_g[1],
    2:four_g[2],
    3:four_g[3],
    4:four_g[4]
}

print(five_a)
#The instructions stated to print five_a

five_b = four_g.copy()
five_b_var = str(300)
five_b.append(five_b_var)

five_c_var=type(five_b_var)
five_c = five_b.copy()
five_c.append(five_c_var)

five_d = five_b_var[0:2]

five_e_var = type(five_d)
five_e = five_c.copy()
five_e.append(five_e_var)

five_f = list(map(int, five_d))


five_g_var = type(five_f)
five_g = five_e.copy()
five_g.append(five_g_var)

five_h_var = type(three_setA)
five_h = five_g.copy()
five_h.append(five_h_var)

print(five_b)
print(five_c)
print(five_d)
print(five_e)
print(five_f)
print(five_g)
print(five_h)


